[const fst map drop length at drop] (require Tea.Prelude [const fst map drop length at drop])
[match-regex join-regex] (require Tea.Regex [match-regex join-regex])

Token (type [: TokenType TokenValue TokenPos])

TokenType (data
  [Open-Paren:]
  [Closed-Paren:]
  [Open-Bracket:]
  [Closed-Bracket:]
  [Symbol:]
  [Whitespace:]
  [Regex:]
  [String:]
  [Char:])

TokenValue (type String)

TokenPos (type Int)

TokenRule (type (Tuple Regex Token))

tokenization-rules [
  (: /\s+/ [Whitespace:])
  (: /\(/ [Open-Paren:])
  (: /\)/ [Closed-Paren:])
  (: /\[/ [Open-Bracket:])
  (: /\]/ [Closed-Bracket:])
  (: /"[^"]*?"/ [String:])
  (: /'\\?[^']'/ [Char:])
  (: /[^\(\)\[\]"'\s]+/ [Symbol:])]

tokenize (fn [source]
  (tokenize-at 0 tokenization-rules source))

tokenize-at (fn [pos rules source]
  (:: String (List TokenRule) (Either (List Token) TokenError))
  (match possible-token
    [Just: [: kind value]] (match (tokenize-at (+ (length value) pos) rules rest)
      [Left: tokens] [Left: (& [: kind value pos] tokens)]
      error error)
    [None:] (if (= "" rest)
      [Left: (list)]
      [Error: rest]))
  [: possible-token rest] (match-token rules-to-apply source)
  rules-to-apply (map rule-application rules))

rule-application (fn [rule string]
  (:: TokenRule TokenRuleApplication)
  (match (match-regex regex-at-start string)
    [Just: token] [Just: [: kind token (drop (length token) string)]]
    none none)
  [: regex kind] rule
  regex-at-start (join-regex /^/ regex))

TokenRuleApplication (type (String (Maybe [: TokenType TokenValue String])))

match-token (fn [rules source]
  (:: (List TokenRuleApplication) String [: (Maybe [: TokenType TokenValue]) String])
  (match (find-first rules source)
    [None:] [: [None:] source]
    [Just: [: kind value rest]] [: [Just: [: kind value]] rest]))

find-first (fn [funs input]
  (:: (List TokenRuleApplication) String (Maybe [: TokenType TokenValue String]))
  (match funs
    [] [None:]
    [f ..rest] (match (f input)
      [None:] (find-first rest input)
      found found)))

print-tokens (fn [tokens]
  (match tokens
    [Left: list] (show-list list)))