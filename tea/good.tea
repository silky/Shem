sieve-ok (fn [fun good-or-bad]
  (match good-or-bad
    {:just value} (fun value)
    {:good value} (fun value)
    none-or-bad none-or-bad))

map-ok (fn [fun good-or-bad]
  (match good-or-bad
    {:just value} {:just (fun value)}
    {:good value} {:good (fun value)}
    none-or-bad none-or-bad))

Maybe (data [a]
  ;none
  {:just a})

maybe (fn [default transform input]
  (match input
    ;none default
    {:just value} (transform value)))

_ (= 2 (maybe 0 (+ 1) {:just 1}))
_ (= 0 (maybe 0 (+ 1) ;none))

Either (data [a b]
  {:left a}
  {:right b})

Good (data [a b]
  {:good a}
  {:bad b})

either (fn [left right input]
  (:: (a c) (b c) (Either a b) c)
  (match input
    {:left value} (left value)
    {:right value} (right value)))

_ (= 6 (either (+ 1) (- 1) {:left 5}))
_ (= 4 (either (+ 1) (- 1) {:right 5}))

map-maybe (fn [fun input]
  (:: (a b) (Maybe a) (Maybe b))
  (match input
    {:just value} {:just (fun value)}
    none none))